#!/bin/sh -f

#
# bud - pywalesque posix sh alternative.
#
# Based on an old script with the same name created by Dylan Araps:
# https://raw.githubusercontent.com/dylanaraps/bin/cdaa7b58c917fd9d86d2d5bbb45cad0dcd783408/bud
#

die() {
    printf '%s\n' "$@"
    exit 1
}

is_img() {
    printf '%s\n' "$1" | grep -q -e ".jpg" -e ".jpeg" -e ".png" && {
        return 0
    }

    return 1
}

add_sequence() {
    seqs="$seqs]$1;$2\\";

    case $1 in
        *";"*)
            [ "${1##*;}" -lt 16 ] && {
                printf '%s\n' "color${1##*;}=\"$2\"" >> "$cache_dir/colors"
            }
        ;;
    esac
}

make_sequences() {
    for line in $palette; do
        color="${line:=#000000}"

        add_sequence "4;${i:=0}" "$color"

        [ "$i" = 0 ] && {
            add_sequence "11" "$color"
            add_sequence "17" "$color"
            add_sequence "4;257" "$color"
            add_sequence "4;258" "$color"
            [ "$VTE_VERSION" ] || add_sequence "708" "$color"
        }

        [ "$i" = 15 ] && {
            add_sequence "10" "$color"
            add_sequence "12" "$color"
            add_sequence "13" "$color"
            add_sequence "19" "$color"
            add_sequence "4;256" "$color"
            add_sequence "4;259" "$color"
        }

        : $((i+=1))
    done
}

print_current() {
    printf 'Using image: %s\n\n' "$img"

    for i in 1 2 3 4 5 6 7; do
        printf '\033[4%sm  \033[m ' "$i"
    done

    printf '\n\n'

    exit
}

activate_palette() {
    set +f
    set -f -- /dev/pts/[0-9]*
    for tty in "$@"; do
        [ -w "$tty" ] && printf %b "$seqs" > "$tty" &
    done

    printf %b "$seqs" > "$cache_dir/sequences"
}

random_img() {
    set +f
    set -f -- "$1/"*
    shift "$(shuf -i "0-$#" -n 1)"

    while ! is_img "$1" && [ "$2" ]; do shift; done

    [ -f "${img:=$1}" ] || die "Failed to select a random img."
}

hex2rgb() {
    set -- "${1##\#}"

    r=${1%%????}
    g=${1##??}
    g=${g%%??}
    b=${1##????}

    r=$((0x$r))
    g=$((0x$g))
    b=$((0x$b))
}

mod() {
    hex2rgb "$2"

    # The operator is stored in a variable
    # which makes shellcheck freak out.
    # shellcheck disable=1102,2086
    {
        r=$((r $3 $4))
        g=$((g $3 $4))
        b=$((b $3 $4))
    }

    r=$((r > 255 ? 255 : r < 0 ? 0 : r))
    g=$((g > 255 ? 255 : g < 0 ? 0 : g))
    b=$((b > 255 ? 255 : b < 0 ? 0 : b))

    export "$1=$(printf '#%02x%02x%02x' "$r" "$g" "$b")"
}

convert_colors() {
    # shellcheck disable=2046

    set -- $(\
        convert "$img" \
            -alpha off \
            -resize 64x64 \
            -posterize 16 \
            -fill white \
            -colorize 25% \
            -modulate 150,125,100 \
            -unique-colors \
            txt:- |

        while IFS='# ' read -r _ _ col _; do
            i=$((i+1))

            [ "$i" -lt 11 ] && continue
            [ "$i" -gt 16 ] && continue

            printf '%s\n' "#$col"
        done
    )

    # These variables are dynamically defined,
    # ignore undeclared variable warnings.
    # shellcheck disable=2154
    {
        # mod bg "$2" / 4
        mod bg "$2" - 140
        mod fg "$2" + 125
        mod co "$bg" + 85

        # xsetroot -solid "$co"

        set -- "$bg" "$@" "$fg" "$co" "$@" "$fg"
    }

    palette=$*
}

main() {
    mkdir -p "${cache_dir:=$HOME/.cache/bud}"

    [ -n "$BUD_LIB" ] || die "BUD_LIB is not set."
    [ -d "$BUD_LIB" ] || die "$BUD_LIB is not a directory."

    [ "$1" = "restore" ] && [ -f "$cache_dir/sequences" ] && {
        cat "$cache_dir/sequences"
        exit
    }

    set -- "${BUD_LIB%%/}"

    random_img "$@"

    :> "$cache_dir/colors"

    printf '%s\n' "wallpaper=\"$img\"" >> "$cache_dir/colors"

    convert_colors

    make_sequences

    activate_palette

    feh --bg-fill "$img"

    print_current
}

main "$1"
